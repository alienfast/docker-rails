verbose: true
before_command: bash -c "rm -Rf target && rm -Rf log"
exit_code: web

# create a global gemset to be shared amongst all ruby 2.2.2 containers.
gemset:
  name: 2.2.2
  # setup GEM_HOME environment variable and `volumes_from` to mount the global gemset container
  containers:
    - web

# Generated:
#compose:
#  web:
#    environment:
#      # Tell bundler where to get the files
#      - GEM_HOME=/gemset/2.2.2
#
#    volumes_from:
#      # Mount the gems data volume container for cached bundler gem files
#      - gemset-2.2.2


# Make the host user's id_rsa key available to the web container e.g. for cloning from github
ssh-agent:
  containers:
    - web
  keys:
    - id_rsa

# Generated:
#compose:
#  web:
#    environment:
#      # make ssh keys available via ssh forwarding (see volume entry)
#      - SSH_AUTH_SOCK=/ssh-agent/socket
#
#    volumes_from:
#      # Use configured whilp/ssh-agent long running container for keys
#      - ssh-agent


# shared extractions
extractions: &extractions
  web:
    extract:
      - '/project/target'
      - '/project/vcr'
      - '/project/tmp/parallel_runtime_cucumber.log:./tmp'
      - '/project/tmp/parallel_runtime_rspec.log:./tmp'
      - '/project/log'

# local environments need elasticsearch, staging/production connects to existing running instance.
elasticsearch: &elasticsearch
  elasticsearch:
    image: library/elasticsearch:1.7
    ports:
      - "9200"

foo:
  compose:
    web:
      command: bash -c "sleep 10 && echo 'foo' && exit 187"

bundle_only:
  compose:
    web:
      command: bash -c "bundle install --jobs 4 --retry 3"

development:
  compose:
    <<: *elasticsearch
    web:
      links:
        - elasticsearch # standard yaml doesn't merge arrays so we have to add this explicitly
      environment:
        - RAILS_ENV=development
      command: >
        bash -c "

        echo 'Bundling gems'
        && bundle install --jobs 4 --retry 3

        && echo 'Generating Spring binstubs'
        && bundle exec spring binstub --all

        && echo 'Clearing logs'
        && bundle exec rake log:clear

        && echo 'Check and wait for database connection'
        && bundle exec docker-rails db_check mysql

        && echo 'DB rebuild'
        && bundle exec rake db:rebuild_dev

        && echo "Starting app server"
        && bundle exec rails s -p 3000
        "

#        && echo 'Setup and start foreman'
#        && gem install foreman
#        && foreman start

test:
  <<: *extractions
  compose:
    <<: *elasticsearch
    web:
      links:
        - elasticsearch # standard yaml doesn't merge arrays so we have to add this explicitly
      environment:
        - RAILS_ENV=test
      command: >
        bash -c "
        echo 'Bundling gems'
        && bundle install --jobs 4 --retry 3

        && echo 'Check and wait for database connection'
        && bundle exec docker-rails db_check mysql

        && echo 'DB rebuild'
        && bundle exec rake db:rebuild_test

        && echo 'Tests'
        && cd ../..
        && xvfb-run -a bundle exec rake \
            spec SPEC=spec/app/models/batch/csv_spec.rb \
            cucumber FEATURE=features/activation/4_admin_import_members.feature
        "

#        && xvfb-run -a bundle exec rake spec
#        && xvfb-run -a bundle exec rake spec SPEC=spec/app/models/plan_spec.rb
#        && xvfb-run -a bundle exec rake spec SPEC=spec/app/models/plan_spec.rb cucumber FEATURE=features/public_pages.feature

# cucumber
# rake FEATURE=features/adding_products.feature cucumber

parallel_tests:
  <<: *extractions
  compose:
    <<: *elasticsearch
    web:
      links:
        - elasticsearch # standard yaml doesn't merge arrays so we have to add this explicitly
      environment:
        - RAILS_ENV=test
      command: >
        bash -c "

        echo 'Bundling gems'
        && time bundle install --jobs 4 --retry 3

        && echo 'Check and wait for database connection'
        && time bundle exec docker-rails db_check mysql

        && echo 'DB rebuild'
        && time bundle exec rake db:rebuild_test[true]

        && cd ../..
        && echo 'Tests'
        && time xvfb-run -a bundle exec rake parallel:spec parallel:features
        "

staging:
  compose:
    web:
      environment:
        - RAILS_ENV=staging
      command: >
        bash -c "

        echo 'Bundling gems'
        && bundle install --jobs 4 --retry 3

        && echo 'Clearing logs'
        && bundle exec rake log:clear

        && echo 'Check and wait for database connection'
        && bundle exec docker-rails db_check mysql

        && echo 'DB rebuild'
        && bundle exec rake db:migrate

        && echo "Starting app server"
        && bundle exec rails s -p 3000

        && echo 'Setup and start foreman'
        && gem install foreman
        && foreman start
        "
compose:

  web:
    build: .
    working_dir: /project
    ports:
      - "3000"

    links:
      - db

  db:
    # https://github.com/docker-library/docs/tree/master/mysql
    image: library/mysql:5.7
    ports:
      - "3306"

    volumes:
      - ./db/mysql:/etc/mysql/conf.d
#      - ./target/mysql/data:/var/lib/mysql

    # https://github.com/docker-library/docs/tree/master/mysql#environment-variables
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true